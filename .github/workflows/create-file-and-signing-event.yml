name: 'Create file and signing event'

on:
  push:
    paths: 
      - '**/*.go'  # Trigger when Go files in the source-code directory change.

jobs:
  build-and-upload:
    name: 'Build and upload Go binaries'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    env:
      TZ: Europe/Madrid  # Set the timezone to your local timezone

    steps:
      # Step 1: Clone the source repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Install Go
      - name: Setting up Golang
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      # Step 3: List all Go files in the directory
      - name: List All Go Files
        run: |
          echo "Listing all Go files in the directory:"
          find . -type f -name "*.go"

        # Step 4: Build all Go files
      - name: Build All Go Files
        id: build_step
        run: |
          echo "Building all Go files in the directory..."
          mkdir -p build
          find . -type f -name "*.go" | while read -r file; do
            echo "Building $file..."
            output_name=$(basename "$file" .go)
            go build -o "build/$output_name" "$file"
          done

      # Step 5: Show Build Results
      - name: List Build Output
        run: |
          echo "Build outputs:"
          ls -lh build/

      # Step 6: Authenticate with Google Cloud
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          workload_identity_provider: projects/185640679849/locations/global/workloadIdentityPools/github/providers/github-prov
          service_account: github-actions-auth@polished-medium-445107-i9.iam.gserviceaccount.com
          access_token_lifetime: '600s'

      # Step 7: Upload binaries to Google Artifact Registry
      - name: Pushing all binaries to Google Artifact Registry
        id: pushing-GAR
        run: |
          echo "Uploading all binaries in build/ to Google Artifact Registry..."
          version=$(date +'%Y.%m.%d-%H.%M.%S')
          echo "::set-output name=version::$version"

          for file in build/*; do
            filename=$(basename "$file")
            echo "Processing $file... inside package $filename"
            echo "Uploading $file with version $version..."
            gcloud artifacts generic upload \
              --repository=nebula-storage \
              --location=europe-southwest1 \
              --project=polished-medium-445107-i9 \
              --package=$filename \
              --version="$version" \
              --source="$file"
          done

      # Step 8: Clone the target repository
      - name: Clone Target Repository
        run: |
          echo "Cloning target repository for index.json..."
          git clone https://github.com/sorayaormazabalmayo/TUF_Repository_YubiKey_Vault.git tuf-repo
          cd tuf-repo
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          mkdir -p updates-not-released-index

      # Step 9: Generate or Update index.json
      - name: Update index.json with new versions
        run: |
          for file in ../../build/*; do

            echo "The filename could be $file"
            # Correct the syntax for index-name assignment
            index_name="${file}-index.json"

            # Change to the appropriate directory
            cd "tuf-repo/updates-not-released-index" || exit
            echo "Checking for existing index.json..."

            # Check if the file exists
            if [ -f "$index_name" ]; then
              echo "$index_name exists, loading it."
            else
              echo "$index_name does not exist, creating a new one."
              echo '{}' > "$index_name"
            fi

            echo "Processing $file..."
            # Collect file details
            length=$(stat -c%s "$file")
            sha256=$(sha256sum "$file" | awk '{print $1}')
            filename=$(basename "$file")

            # Access the version output from the previous step
            version="${{ steps.pushing-GAR.outputs.version }}"

            echo "File: $filename, Length: $length, SHA256: $sha256, Version: $version"

            # Update the JSON index file
            jq --arg file "$filename" \
              --arg length "$length" \
              --arg sha256 "$sha256" \
              --arg version "$version" \
              '.[$file] = {length: ($length | tonumber), hashes: {sha256: $sha256}, version: $version}' "$index_name" > tmp.json && mv tmp.json "$index_name"

            echo "Updated $index_name"
            cat "$index_name"
          done

          

      # Step 10: Commit and Push index.json to the Target Repository
      - name: Commit and Push index.json
        env:
          GITHUB_TOKEN: ${{ secrets.TUF_REPO_PAT }}
        run: |
          cd tuf-repo
          echo "Checking for changes..."
          if [ -n "$(git status --porcelain)" ]; then
            echo "Changes detected, committing index.json..."
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add updates-not-released-index/index.json
            git commit -m "Update index.json with new versions"
            git push https://x-access-token:${{ secrets.TUF_REPO_PAT }}@github.com/sorayaormazabalmayo/TUF_Repository_YubiKey_Vault.git main
          else
            echo "No changes to commit."
          fi

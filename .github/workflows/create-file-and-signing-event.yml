name: 'Upload .go Files to Google Artifact Registry'

on:
  push:
    paths: 
      - 'source-code/**/*.go'  # Trigger when Go files in source-code change.

jobs:
  upload-go-files:
    name: 'Upload .go Files to Google Artifact Registry'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    steps:
      # Step 1: Clone the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Authenticate with Google Cloud
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          workload_identity_provider: projects/185640679849/locations/global/workloadIdentityPools/github/providers/github-prov
          service_account: github-actions-auth@polished-medium-445107-i9.iam.gserviceaccount.com
          access_token_lifetime: '600s'

      # Step 3: Upload all .go files to Google Artifact Registry
      - name: Upload .go Files to Google Artifact Registry
        run: |
          echo "Uploading all .go files in source-code/ to Google Artifact Registry..."
          find source-code -type f -name "*.go" | while read file; do
            echo "Processing $file..."

            # Extract filename
            filename=$(basename "$file")
            
            # Extract version from the filename (assumes structure like 'something_v1.2.3.go')
            version=$(echo "$filename" | grep -oE 'v[0-9]+\.[0-9]+\.[0-9]+')
            
            # Ensure version is extracted properly
            if [ -z "$version" ]; then
              echo "Error: Could not extract version from filename $filename. Skipping upload."
              continue
            fi

            echo "Uploading $file with version $version..."
            gcloud artifacts generic upload \
              --repository=nebula-storage \
              --location=europe-southwest1 \
              --project=polished-medium-445107-i9 \
              --package=nebula-package \
              --version="$version" \
              --source="$file"
          done

      # Step 4: Generate or Update index.json
      - name: Update index.json with new versions
        run: |
          echo "Checking for existing index.json..."
          if [ -f index.json ]; then
            echo "index.json exists, loading it."
          else
            echo "index.json does not exist, creating a new one."
            echo '{}' > index.json
          fi

          find source-code -type f -name "*.go" | while read file; do
            echo "Processing $file..."
            length=$(stat -c%s "$file")
            sha256=$(sha256sum "$file" | awk '{print $1}')
            filename=$(basename "$file")
            
            # Extract version from the filename (assumes structure like 'something_v1.2.3.go')
            version=$(echo "$filename" | grep -oE 'v[0-9]+\.[0-9]+\.[0-9]+')
            
            echo "File: $filename, Length: $length, SHA256: $sha256, Version: $version"
            
            # Add or update the entry in index.json
            jq --arg file "$filename" \
              --arg length "$length" \
              --arg sha256 "$sha256" \
              --arg version "$version" \
              '.[$file] = {length: ($length | tonumber), hashes: {sha256: $sha256}, version: $version}' index.json > tmp.json && mv tmp.json index.json
          done

          echo "Updated index.json:"
          cat index.json

      # Step 5: Commit and Push index.json to the Repository
      - name: Commit and Push index.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Checking for changes..."
          if [ -n "$(git status --porcelain)" ]; then
            echo "Changes detected, committing index.json..."
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add index.json
            git commit -m "Update index.json with new versions"
            git push origin ${{ github.ref }}
          else
            echo "No changes to commit."
          fi

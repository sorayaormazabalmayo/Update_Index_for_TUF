name: 'Create file and signing event'

on:
  push:
    paths: 
      - 'source-code/**/*.go'  # Trigger when Go files in source-code change.

jobs:
  build-and-upload:
    name: 'Build and upload Go binaries'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    steps:
      # Step 1: Clone the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Install Go
      - name: Setting up Golang
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      # Step 3: List all Go files in source-code directory
      - name: List All Go Files in source-code
        run: |
          echo "Listing all Go files in source-code directory:"
          find source-code -type f -name "*.go"

      # Step 4: Build all Go files
      - name: Build All Go Files
        run: |
          mkdir -p build
          echo "Building all Go files in source-code..."
          find source-code -type f -name "*.go" | while read file; do
            echo "Building $file..."
            output_name=$(basename $file .go)
            go build -o build/$output_name $file
          done

      # Step 5: Show Build Results
      - name: List Build Output
        run: |
          echo "Build outputs:"
          ls -lh build/

      # Step 6: Authenticate with Google Cloud
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          workload_identity_provider: projects/185640679849/locations/global/workloadIdentityPools/github/providers/github-prov
          service_account: github-actions-auth@polished-medium-445107-i9.iam.gserviceaccount.com
          access_token_lifetime: '600s'

      # Step 7: Upload binaries to Google Artifact Registry
      - name: Pushing all binaries to Google Artifact Registry
        run: |
          echo "Uploading all binaries in build/ to Google Artifact Registry..."
          for file in build/*; do
            echo "Uploading $file..."
            gcloud artifacts generic upload \
              --repository=nebula-storage \
              --location=europe-southwest1 \
              --project=polished-medium-445107-i9 \
              --package=nebula-package \
              --version=v1.0.2 \
              --source="$file"
          done

      # Step 8: Extract parameters of the file and update index.json
      - name: Extracting parameters and updating index.json
        run: |
          echo "Initializing index.json..."
          echo '{}' > index.json
          for file in build/*; do
            echo "Processing $file..."
            length=$(stat -c%s "$file")
            sha256=$(sha256sum "$file" | awk '{print $1}')
            filename=$(basename "$file")
            
            # Extract version from the filename (assumes structure like 'something_v1.2.3')
            version=$(echo "$filename" | grep -oE 'v[0-9]+\.[0-9]+\.[0-9]+')
            
            echo "File: $filename, Length: $length, SHA256: $sha256, Version: $version"
            
            # Add file details to index.json using jq
            jq --arg file "$filename" \
               --arg length "$length" \
               --arg sha256 "$sha256" \
               --arg version "$version" \
               '.[$file] = {length: ($length | tonumber), hashes: {sha256: $sha256}, version: $version}' index.json > tmp.json && mv tmp.json index.json
          done
          echo "Updated index.json:"
          cat index.json

      # Step 9: Commit and Push index.json to the Repository
      - name: Commit and Push index.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Checking for changes..."
          if [ -n "$(git status --porcelain)" ]; then
            echo "Changes detected, committing index.json..."
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add index.json
            git commit -m "Add or update generated index.json"
            git push origin ${{ github.ref }}
          else
            echo "No changes to commit."
          fi
